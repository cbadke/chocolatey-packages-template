# AU template: https://github.com/majkinetor/au-packages-template

version: '{build}'
max_jobs: 1
image: WMF 5
clone_depth: 5
branches:
  only:
  - master
#build:
#  verbosity: minimal

environment:
  # Set au version to use or omit to use the latest. Specify branch name to use development version from Github
  au_version:
  au_push: true

  # Github token to commit pushed packages to repository
  github_user_repo: cbadke/jenkins-chocolatey-package
  github_api_key:
    secure: gdbQmO7V5IKt0m6lJgDcgvzFdIlKTa+Y6eanJRUyIYoF6HD59Wr4nXksvP+rPRSK


  # Mail credentials - for error notifications
  mail_user:
    secure: H7cLAqoD1IqqY3mN8E68z+k2H/LtqdNIDdp2DrjHMSY=
  mail_pass:
    secure: VQtEWaF0sr/Wk+2D2OSf+JMBkIyc24fs5a1bCbJZ2MNJaPQD/Ma5zHq42p0H0WX40isRlJmvKhiVKRlFIwRmZqSy35OMo46FMaAC5NlJg4c=
  mail_server: smtp.gmail.com
  mail_port: 587
  mail_enablessl: true

  # ID of the gist used to save run results - create a gist under the github_user (secret or not) and grab the id - https://gist.github.com/name/id
  # Optional, leave empty to create anonymous gist
  gist_id: 563ce377109a3a13f8a0b96ce98491c2

  # Chocolatey API key - to push updated packages
  api_key:
    secure: /a3mgK80gwQ5PEKWUvB6ro2BiN0ZhJyryZQ4ccv8UbvkKnk38fthILNz4EJdd8c5

init:
- git config --global user.email "jenkins.choco@gmail.com"
- git config --global user.name "Chocolatey"
- git config --global core.safecrlf false

install:
- ps: 'Get-CimInstance win32_operatingsystem -Property Caption, OSArchitecture, Version | fl Caption, OSArchitecture, Version'
- ps: $PSVersionTable
- git --version
- ps: |
    git clone -q https://github.com/majkinetor/au.git $Env:TEMP/au
    . "$Env:TEMP/au/scripts/Install-AU.ps1" $Env:au_version

build_script:
- ps: |
    if ( ($Env:APPVEYOR_SCHEDULED_BUILD -ne 'true') -and ($Env:APPVEYOR_FORCED_BUILD -ne 'true') ) {
        switch -regex ($Env:APPVEYOR_REPO_COMMIT_MESSAGE)
        {
            '\[AU (.+?)\]'   { $forced = $Matches[1] }

            '\[PUSH (.+?)\]' {
                $packages = $Matches[1] -split ' '
                Write-Host "PUSHING PACKAGES: $packages"
                foreach ($package in $packages) {
                    Write-Host ("{0}`n{1}`n" -f ('-'*60), "PACKAGE: $package")
                    $package_dir = ls -recurse | ? { $_.Name -eq "$package.nuspec"} | select -First 1 | % Directory
                    if (!$package_dir) { Write-Warning "Can't find package '$package'"; continue }
                    #pushd $package_dir; choco pack; Push-Package; popd
                }
                return
            }
        }
    }

    ./update_all.ps1 -ForcedPackages $forced
    7z a au_temp.zip $Env:TEMP\chocolatey\au\*

artifacts:
- path: update_info.xml
- path: Update-AUPackages.md
- path: au_temp.zip

#notifications:
#- provider: Email
#  to: $(mail_user)
#  on_build_success: false
#  on_build_failure: true
#  on_build_status_changed: true

#on_finish:
#- ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
